
def handleAppInfo(*gin.Context c) (

    string appname = c.Param("appname").toLower()
    object app = getAppInfo(appname)
    if app.ok == false (
        c.JSON(404, app)
        return
    )

    object stats = fs.ReadFile("./stats.json").JsonParse()
    object views = stats.views
    views[appname] = views[appname].toNum() + 1
    stats.views = views
    fs.WriteFile("./stats.json", stats.JsonFormat())

    c.JSON(200, app)
)

def handleAppIcon(*gin.Context c) (
    c.File(fs.JoinPath("./apps", c.Param("appname").toLower(), "icon.icn"))
)

def handleAppFile(*gin.Context c) (
    string appname = c.Param("appname").toLower()
    string fileType = c.Param("filetype")
    string token = c.Query("auth")

    string path = fs.JoinPath("./apps", appname, "script." ++ fileType.toLower())
    boolean exists = fs.Exists(path)

    app := getAppInfo(appname)
    if !exists or app.ok == false (
        c.JSON(404, {
            ok: false,
            error: "app not found",
        })
        return
    )

    info := app.info

    string username = ""
    if token != "" (
        array parts = token.split(",")
        if parts.len >= 2 (
            username = parts[2].toStr().toLower()
        )
    )

    object ownerships = readOwnerships()
    array owners = ownerships[appname]
    if owners == null (
        owners = []
    )
    boolean alreadyOwns = false
    if username != "" (
        alreadyOwns = owners.contains(username)
    )

    if info.price != null and info.price > 0 and alreadyOwns == false (
        if token == "" (
            c.JSON(401, { ok: false, error: "missing auth token" })
            return
        )
        object resp = requests.Post("https://api.rotur.dev/me/transfer?auth=" ++ token, {
            body: {
                amount: info.price,
                to: info.authors[1],
                note: "App store: " ++ info.title ++ " purchase",
            }
        })
        if resp.success == false (
            c.JSON(400, { ok: false, error: "failed to transfer" })
            return
        )
    )

    if username != "" and alreadyOwns == false (
        void owners.append(username)
        ownerships[appname] = owners
        writeOwnerships(ownerships)
    )

    object stats = fs.ReadFile("./stats.json").JsonParse()
    object downloads = stats.downloads
    downloads[appname] = downloads[appname].toNum() + 1
    stats.downloads = downloads
    fs.WriteFile("./stats.json", stats.JsonFormat())

    c.File(path)
)

def handleAllApps(*gin.Context c) (
    string token = c.Query("auth")
    string username = ""
    if token != "" (
        array parts = token.split(",")
        if parts.len >= 2 (
            username = parts[2].toStr().toLower()
        )
    )

    object resp = getAllApps(false)
    if resp.ok == false (
        c.JSON(500, resp)
        return
    )

    if username != "" (
        object ownerships = readOwnerships()
        object apps = resp.apps
        array names = apps.getKeys()
        for i names.len (
            string n = names[i]
            array owners = ownerships[n]
            boolean owns = owners != null and owners.contains(username)
            apps[n].owns = owns
        )
        resp.apps = apps
    )

    c.JSON(200, resp)
)

def handleAppScreenshot(*gin.Context c) (
    string appname = c.Param("appname").toLower()
    string screenshot = c.Param("screenshot")

    string path = fs.JoinPath("./apps", appname, "screenshots", screenshot)
    boolean exists = fs.Exists(path)

    if !exists (
        c.JSON(404, {
            ok: false,
            error: "app not found",
        })
        return
    )

    c.File(path)
)

def handleFeatured(*gin.Context c) (

    object featured = loadConfig("featured.json")
    if featured.featured == null (
        c.JSON(404, {
            ok: false,
            error: "featured app not found",
        })
        return
    )

    c.JSON(200, featured)
)