
def loadConfig(string name) object (
    string path = fs.JoinPath("./config", name)
    value := fs.ReadFile(path).JsonParse()
    if typeof(value) !== "object" (
        println("error: config file '" ++ name ++ "' is not a valid json object")
    )
    return value.assert(object)
)

def getAppInfo(string appname) object (
    string path = fs.JoinPath("./apps", appname)
    string infoPath = fs.JoinPath(path, "info.json")
    boolean exists = fs.Exists(infoPath)

    if !exists (
        infoPath = fs.JoinPath(path, "info.json.hidden")
        exists = fs.Exists(infoPath)
        if !exists (
            return {
                ok: false,
                error: "app not found",
            }
        )
    )

    object info = fs.ReadFile(infoPath).JsonParse()
    info.hidden = infoPath.endsWith(".hidden")

    object approvals = readApprovals()
    boolean approved_status = approvals[appname.toLower()] == true
    info.approved = approved_status

    string iconPath = fs.JoinPath(path, "icon.icn")
    boolean iconExists = fs.Exists(iconPath)
    if iconExists (
        info.icon = fs.ReadFile(iconPath)
    )

    info.supports = []
    array info_supports = info.supports

    info.scripts = {}
    object info_scripts = info.scripts

    array fileNames = fs.ReadDir(path)
    for i fileNames.len (
        string fileName = fileNames[i]
        if fileName.startsWith(".") (
            continue
        )
        boolean isDir = fs.IsDir(fs.JoinPath(path, fileName))
        string fileType = fs.GetExt(fileName).stripStart(".")
        if fileTypes[fileType] != null (
            object data = fileTypes[fileType]
            array supports = data.supported
            for k supports.len (
                void info_supports.append(supports[k])
            )
            info.supports = info_supports

            string scriptPath = fs.JoinPath(path, fileName)
            info_scripts[fileType] = {
                size: fs.GetSize(scriptPath),
            }
        )
        fileNames[i] = fileName
        if fileName === "changelogs" and isDir (
            array changelogs = fs.ReadDir(fs.JoinPath(path, fileName))
            info.changelogs = []
            for k changelogs.len (
                string cl = changelogs[k]
                if cl.startsWith(".") (
                    continue
                )
                array list = info.changelogs
                list = list.append(cl)
                info.changelogs = list
            )
        )
        if fileName === "screenshots" and isDir (
            array screenshots = fs.ReadDir(fs.JoinPath(path, fileName))
            info.screenshots = []
            for k screenshots.len (
                string screenshot = screenshots[k]
                if screenshot.startsWith(".") (
                    continue
                )
                array screenshots = info.screenshots
                screenshots = screenshots.append(screenshot)
                info.screenshots = screenshots
            )
        )
    )

    info.author = info.authors.join(", ")

    object stats = fs.ReadFile("./stats.json").JsonParse()
    info.downloads = stats.downloads[appname.toLower()].toNum()
    info.views = stats.views[appname.toLower()].toNum()

    object ownerships = readOwnerships()
    array owners = ownerships[appname.toLower()]
    if owners == null (
        info.owners = 0
    ) else (
        info.owners = owners.len
    )

    return {
        ok: true,
        info: info,
    }
)

def randomString(int length) string (
    string chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    string result = ""
    for i length (
        result = result ++ chars[rand.Intn(chars.len) + 1].toStr()
    )
    return result
)

def getAllApps(boolean showHidden) object (
    string path = "./apps"
    boolean exists = fs.Exists(path)

    if !exists (
        return {
            ok: false,
            error: "apps not found",
        }
    )

    object apps = {}

    array folders = fs.ReadDir(path)
    for i folders.len (
        string fileName = folders[i]
        if fileName.startsWith(".") (
            continue
        )
        object info = getAppInfo(fileName)
        if info.ok == true (
            object app = info.info
            if ((app.hidden == false and app.approved == true) or showHidden == true) (
                apps[fileName] = app
            )
        )
    )

    return {
        ok: true,
        apps: apps,
    }
)

def getAppsByDev(string dev) array (
    object resp = getAllApps(true)
    if !resp.ok (
        return []
    )

    object apps = resp.apps
    array appNames = apps.getKeys()
    
    array myApps = []
    for i appNames.len (
        object app = apps[appNames[i]]
        array authors = app.authors
        for j authors.len (
            string author = authors[j]
            if author == dev (
                void myApps.append(app)
            )
        )
    )
    return myApps
)

def getAppFile(string appname, string filetype) object (
    string path = fs.JoinPath("./apps", appname, "script." ++ filetype.toLower())
    boolean exists = fs.Exists(path)

    if !exists (
        return {
            ok: false,
            error: "app not found",
        }
    )

    return {
        ok: true,
        data: fs.ReadFile(path),
    }
)

def readApprovals() object (
    string path = fs.JoinPath("./config", "approvals.json")
    if !fs.Exists(path) (
        fs.WriteFile(path, "{}")
    )
    data := fs.ReadFile(path).JsonParse()
    if typeof(data) !== "object" (
        return {}
    )
    return data
)

def writeApprovals(object approvals) (
    fs.WriteFile(fs.JoinPath("./config", "approvals.json"), approvals.JsonFormat())
)

def readOwnerships() object (
    string path = fs.JoinPath("./config", "ownership.json")
    if !fs.Exists(path) (
        fs.WriteFile(path, "{}")
    )
    object data = fs.ReadFile(path).JsonParse()
    if typeof(data) !== "object" (
        return {}
    )
    return data
)

def writeOwnerships(object ownerships) (
    fs.WriteFile(fs.JoinPath("./config", "ownership.json"), ownerships.JsonFormat())
)