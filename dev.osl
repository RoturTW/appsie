// backend api for dev management of their apps

def handleDevAuth(*gin.Context c) (
    string token = c.Query("v")
    if token == "" (
        c.JSON(401, { ok: false, error: "missing token" })
        return
    )
    object resp = requests.Get("https://api.rotur.dev/validate?key=rotur-app-store&v=" + token)

    if !resp.success (
        c.JSON(401, { ok: false, error: "failed to validate token" })
        return
    )

    object json = resp.body.toStr().JsonParse()
    if json.error != null (
        c.JSON(401, { ok: false, error: json.error })
        return
    )
    if !json.valid (
        c.JSON(401, { ok: false, error: "invalidate token" })
        return
    )

    string sessionId = randomString(32)
    
    string username = token.split(",")[1]
    sessions[sessionId] = username

    c.SetCookie("session_id", sessionId, 3600, "/", "", false, true)

    c.JSON(200, { ok: true, token: token })
)

def handleLogout(*gin.Context c) (
    c.SetCookie("session_id", "", 3600, "/", "", false, true)
    c.JSON(200, { ok: true })
)

def handleMyApps(*gin.Context c) (
    string dev = c.MustGet("username")
    array apps = getAppsByDev(dev)
    c.JSON(200, apps)
)

def handleCreateApp(*gin.Context c) (
    string appname = c.Query("appname")

    string username = c.MustGet("username").toStr()
    if appname == "" (
        c.JSON(400, { ok: false, error: "missing appname" })
        return
    )
    string path = fs.JoinPath("./apps", appname)
    if fs.Exists(path) (
        c.JSON(400, { ok: false, error: "app already exists" })
        return
    )

    adminToken := os.Getenv("ADMIN_TOKEN")
    if adminToken == "" (
        c.JSON(400, { ok: false, error: "missing admin token" })
        return
    )

    // charge for creating apps
    resp := requests.Post("https://api.rotur.dev/admin/transfer_credits?amount=9&from=" ++ username ++ "&to=rotur", {
        authorization: adminToken,
    })
    if resp.success == false (
        c.JSON(400, { ok: false, error: "failed to transfer credits" })
        return
    )
    string body = resp.body.toStr()
    object data = body.JsonParse()
    if typeof(data) !== "object" (
        c.JSON(400, { ok: false, error: "invalid response body" })
        return
    )
    if data.error != null (
        c.JSON(400, { ok: false, error: data.error })
        return
    )

    fs.CopyDir(fs.JoinPath("./apps", ".template"), fs.JoinPath("./apps", appname))

    object info = fs.ReadFile(fs.JoinPath(path, "info.json")).JsonParse()
    info.title = appname
    array authors = info.authors
    authors.append(username)
    info.authors = authors
    fs.WriteFile(fs.JoinPath(path, "info.json"), info.JsonFormat())
    c.JSON(200, { ok: true })
)

def handleDeleteApp(*gin.Context c) (
    string appname = c.Param("appname")
    string username = c.MustGet("username")
    if appname == "" (
        c.JSON(400, { ok: false, error: "missing appname" })
        return
    )
    string path = fs.JoinPath("./apps", appname)
    if !fs.Exists(path) (
        c.JSON(400, { ok: false, error: "app does not exist" })
        return
    )

    object app = getAppInfo(appname)
    if app.ok == false (
        c.JSON(404, { ok: false, error: "app not found" })
        return
    )

    array authors = app.info.authors

    for i authors.len (
        string author = authors[i]
        if author == username (
            fs.Remove(path)
            c.JSON(200, { ok: true })
            return
        )
    )

    c.JSON(401, { ok: false, error: "not authorized" })
)

def handleUpdateApp(*gin.Context c) (
    string appname = c.Param("appname")
    string version = c.Query("version")
    if version == "" (
        c.JSON(400, { ok: false, error: "missing version" })
        return
    )
    if appname == "" (
        c.JSON(400, { ok: false, error: "missing appname" })
        return
    )
    string path = fs.JoinPath("./apps", appname)
    if !fs.Exists(path) (
        c.JSON(400, { ok: false, error: "app does not exist" })
        return
    )
    
    string infoPath = fs.JoinPath(path, "info.json.hidden")

    object info = fs.ReadFile(infoPath).JsonParse()
    
    object newInfo = c.Request.Body.toStr().JsonParse()

    array keys = newInfo.getKeys()
    for i keys.len (
        string key = keys[i]
        if info.contains(key) (
            info[key] = newInfo[key]
        )
    )

    fs.WriteFile(infoPath, info.JsonFormat())

    c.JSON(200, { ok: true })
)

// this api is for updating keys in the info.json file
def updateAppInfo(*gin.Context c) (
    string appname = c.Param("appname")
    string username = c.MustGet("username")

    object app = getAppInfo(appname)

    if app.ok == false (
        c.JSON(404, { ok: false, error: "app not found" })
        return
    )

    string path = fs.JoinPath("./apps", appname)
    object info = app.info
    array authors = info.authors

    string infoPath = ""
    if app.hidden == true (
        infoPath = fs.JoinPath(path, "info.json.hidden")
    ) else (
        infoPath = fs.JoinPath(path, "info.json")
    )

    boolean allowed = false
    for i authors.len (
        string author = authors[i]
        if author == username (
            allowed = true
        )
    )
    if !allowed (
        c.JSON(401, { ok: false, error: "not authorized" })
        return
    )

    object newInfo = c.Request.Body.toStr().JsonParse()

    object currentInfo = fs.ReadFile(infoPath).JsonParse()

    array keys = newInfo.getKeys()
    for i keys.len (
        string key = keys[i]
        if ["title", "downloads", "views"].contains(key) (
            continue
        )
        currentInfo[key] = newInfo[key]
    )

    fs.WriteFile(infoPath, currentInfo.JsonFormat())

    c.JSON(200, { ok: true })
)


def handleAppUpload(*gin.Context c) (
    string appname = c.Param("appname")
    string filetype = c.Param("filetype")

    string path = fs.JoinPath("./apps", appname, "script." ++ filetype.toLower())

    c.File(path)
)

def handleAppDelete(*gin.Context c) (
    string appname = c.Param("appname")
    string filetype = c.Param("filetype")

    string path = fs.JoinPath("./apps", appname, "script." ++ filetype.toLower())

    fs.Remove(path)

    c.JSON(200, { ok: true })
)

def handleAppScreenshotUpload(*gin.Context c) (
    string appname = c.Param("appname")
    string screenshot = c.Param("screenshot")

    string username = c.MustGet("username")

    object app = getAppInfo(appname)
    if app.ok == false (
        c.JSON(400, { ok: false, error: "app does not exist" })
        return
    )

    object info = app.info
    array authors = info.authors

    boolean allowed = false
    for i authors.len (
        string author = authors[i]
        if author == username (
            allowed = true
            break
        )
    )

    if !allowed (
        c.JSON(401, { ok: false, error: "not authorized" })
        return
    )

    string screenshotsPath = fs.JoinPath("./apps", appname, "screenshots")
    if !fs.Exists(screenshotsPath) (
        fs.Mkdir(screenshotsPath)
    )

    string path = fs.JoinPath(screenshotsPath, screenshot)

    if fs.Exists(path) (
        c.JSON(400, { ok: false, error: "screenshot already exists" })
        return
    )

    file := c.FormFile("file").toArray()
    if file[2] != null (
        c.JSON(400, { ok: false, error: "invalid file" })
        return
    )

    c.SaveUploadedFile(file[1].assert("*multipart.FileHeader"), path)

    c.JSON(200, { ok: true })
)

def handleAppScreenshotDelete(*gin.Context c) (
    string appname = c.Param("appname")
    string screenshot = c.Param("screenshot")

    string username = c.MustGet("username")

    object app = getAppInfo(appname)
    if app.ok == false (
        c.JSON(400, { ok: false, error: "app does not exist" })
        return
    )

    object info = app.info
    array authors = info.authors

    boolean allowed = false
    for i authors.len (
        string author = authors[i]
        if author == username (
            allowed = true
            break
        )
    )

    if !allowed (
        c.JSON(401, { ok: false, error: "not authorized" })
        return
    )

    string path = fs.JoinPath("./apps", appname, "screenshots", screenshot)

    if !fs.Exists(path) (
        c.JSON(400, { ok: false, error: "screenshot does not exist" })
        return
    )

    fs.Remove(path)

    c.JSON(200, { ok: true })
)

def handleHideApp(*gin.Context c) (
    string appname = c.Param("appname")
    string username = c.MustGet("username")
    
    object app = getAppInfo(appname)
    if app.ok == false (
        c.JSON(400, { ok: false, error: "app does not exist" })
        return
    )

    string path = fs.JoinPath("./apps", appname)
    object info = app.info
    array authors = info.authors

    for i authors.len (
        string author = authors[i]
        if author == username (
            fs.Rename(fs.JoinPath(path, "info.json"), fs.JoinPath(path, "info.json.hidden"))

            c.JSON(200, { ok: true })
            return
        )
    )

    c.JSON(401, { ok: false, error: "not authorized" })
)

def handleShowApp(*gin.Context c) (
    string appname = c.Param("appname")
    string username = c.MustGet("username")

    object app = getAppInfo(appname)
    if app.ok == false (
        c.JSON(400, { ok: false, error: "app does not exist" })
        return
    )

    string path = fs.JoinPath("./apps", appname)
    object info = app.info
    array authors = info.authors

    for i authors.len (
        string author = authors[i]
        if author == username (
            fs.Rename(fs.JoinPath(path, "info.json.hidden"), fs.JoinPath(path, "info.json"))

            c.JSON(200, { ok: true })
            return
        )
    )

    c.JSON(401, { ok: false, error: "not authorized" })
)

def handleAppFileList(*gin.Context c) (
    string appname = c.Param("appname")
    string relPath = c.DefaultQuery("path", "")

    object app = getAppInfo(appname)
    if app.ok == false (
        c.JSON(400, { ok: false, error: "app does not exist" })
        return
    )

    string dir = fs.JoinPath("./apps", appname, relPath)
    if !fs.Exists(dir) (
        c.JSON(400, { ok: false, error: "invalid path" })
        return
    )

    array entries = fs.ReadDir(dir)
    array files = []
    array dirs = []
    for i entries.len (
        string f = entries[i]
        if f.startsWith(".") (
            continue
        )
        string full = fs.JoinPath(dir, f)
        if fs.IsDir(full) (
            void dirs.append(f)
        ) else (
            void files.append(f)
        )
    )

    c.JSON(200, { ok: true, path: relPath, dirs: dirs, files: files })
)

def handleAppFileGet(*gin.Context c) (
    string appname = c.Param("appname")
    string file = c.Query("file")
    string relPath = c.DefaultQuery("path", "")
    if file == "" (
        c.JSON(400, { ok: false, error: "missing file param" })
        return
    )

    string path = fs.JoinPath("./apps", appname, relPath, file)
    boolean exists = fs.Exists(path)
    if !exists (
        c.JSON(404, { ok: false, error: "file not found" })
        return
    )

    c.File(path)
)

def handleAppFileSave(*gin.Context c) (
    string appname = c.Param("appname")
    string file = c.Query("file")
    string relPath = c.DefaultQuery("path", "")
    if file == "" (
        c.JSON(400, { ok: false, error: "missing file param" })
        return
    )

    string username = c.MustGet("username")
    object app = getAppInfo(appname)
    if app.ok == false (
        c.JSON(400, { ok: false, error: "app does not exist" })
        return
    )
    array authors = app.info.authors
    boolean allowed = false
    for i authors.len (
        string author = authors[i]
        if author == username (
            allowed = true
            break
        )
    )
    if !allowed (
        c.JSON(401, { ok: false, error: "not authorized" })
        return
    )

    string data = c.Request.Body.toStr()
    string dir = fs.JoinPath("./apps", appname, relPath)
    if !fs.Exists(dir) (
        fs.MkdirAll(dir)
    )
    string path = fs.JoinPath(dir, file)
    fs.WriteFile(path, data)
    c.JSON(200, { ok: true })
)

def handleAppFileDelete(*gin.Context c) (
    string appname = c.Param("appname")
    string file = c.Query("file")
    string relPath = c.DefaultQuery("path", "")
    if file == "" (
        c.JSON(400, { ok: false, error: "missing file param" })
        return
    )

    string username = c.MustGet("username")
    object app = getAppInfo(appname)
    if app.ok == false (
        c.JSON(400, { ok: false, error: "app does not exist" })
        return
    )
    array authors = app.info.authors
    boolean allowed = false
    for i authors.len (
        string author = authors[i]
        if author == username (
            allowed = true
            break
        )
    )
    if !allowed (
        c.JSON(401, { ok: false, error: "not authorized" })
        return
    )

    string path = fs.JoinPath("./apps", appname, relPath, file)
    if !fs.Exists(path) (
        c.JSON(404, { ok: false, error: "file not found" })
        return
    )
    fs.Remove(path)
    c.JSON(200, { ok: true })
)

def handleAppDirCreate(*gin.Context c) (
    string appname = c.Param("appname")
    string relPath = c.DefaultQuery("path", "")
    string dirName = c.DefaultQuery("name", "")

    if dirName == "" (
        c.JSON(400, { ok: false, error: "missing dir name" })
        return
    )

    string username = c.MustGet("username")
    object app = getAppInfo(appname)
    if app.ok == false (
        c.JSON(400, { ok: false, error: "app does not exist" })
        return
    )
    array authors = app.info.authors
    boolean allowed = false
    for i authors.len (
        string author = authors[i]
        if author == username (
            allowed = true
            break
        )
    )
    if !allowed (
        c.JSON(401, { ok: false, error: "not authorized" })
        return
    )

    string dirPath = fs.JoinPath("./apps", appname, relPath, dirName)
    if fs.Exists(dirPath) (
        c.JSON(400, { ok: false, error: "directory already exists" })
        return
    )
    fs.MkdirAll(dirPath)
    c.JSON(200, { ok: true })
)

def handleAppDirDelete(*gin.Context c) (
    string appname = c.Param("appname")
    string relPath = c.DefaultQuery("path", "")

    if relPath == "" (
        c.JSON(400, { ok: false, error: "missing path" })
        return
    )

    string username = c.MustGet("username")
    object app = getAppInfo(appname)
    if app.ok == false (
        c.JSON(400, { ok: false, error: "app does not exist" })
        return
    )
    array authors = app.info.authors
    boolean allowed = false
    for i authors.len (
        string author = authors[i]
        if author == username (
            allowed = true
            break
        )
    )
    if !allowed (
        c.JSON(401, { ok: false, error: "not authorized" })
        return
    )

    string dirPath = fs.JoinPath("./apps", appname, relPath)
    if !fs.Exists(dirPath) (
        c.JSON(404, { ok: false, error: "directory not found" })
        return
    )
    if !fs.IsDir(dirPath) (
        c.JSON(400, { ok: false, error: "not a directory" })
        return
    )
    fs.Remove(dirPath)
    c.JSON(200, { ok: true })
)