array buttons = [
    {
        Name: "Dashboard",
        Src: "bar-chart",
        Link: "/",
    },
    {
        Name: "My Apps",
        Src: "list",
        Link: "/apps",
    },
    {
        Name: "Create App",
        Src: "plus",
        Link: "/create",
    },
]

def mainObject(*gin.Context c) object (
    string username = c.MustGet("username").toStr()
    array send_buttons = buttons.clone()
    if ["mist", "flufi", "iris"].contains(username.toLower()) (
        send_buttons.append({
            Name: "Admin",
            Src: "check-circle",
            Link: "/admin",
        })
    )
    return {
        Username: username,
        Buttons: send_buttons,
    }
)

def homePage(*gin.Context c) (

    object main = mainObject(c)

    array apps = getAppsByDev(main.Username.toStr())

    int numApps = apps.len
    int totalDownloads = 0
    int totalViews = 0
    int hiddenApps = 0

    for i apps.len (
        object app = apps[i]
        if app.hidden == true (
            hiddenApps = hiddenApps + 1
        )
        if app.downloads != null (
            totalDownloads = totalDownloads + app.downloads.toInt()
        )
        if app.views != null (
            totalViews = totalViews + app.views.toInt()
        )
    )

    object stats = {
        NumApps: numApps,
        TotalDownloads: totalDownloads,
        TotalViews: totalViews,
        HiddenApps: hiddenApps,
    }

    c.HTML(200, "index.html", {
        Page: "dashboard",
        PageName: "Dashboard",
        Main: main,
        Stats: stats,
        Apps: apps,
    })
)

def appsPage(*gin.Context c) (

    object main = mainObject(c)
    array apps = getAppsByDev(main.Username.toStr())

    c.HTML(200, "index.html", {
        Page: "apps",
        PageName: "My Apps",
        Main: main,
        Apps: apps
    })
)

def appsInfoPage(*gin.Context c) (

    object main = mainObject(c)
    string appname = c.Param("appname")
    object app = getAppInfo(appname)

    object file = getAppFile(appname, "osl")
    if file.ok == true (
        app.info.code = file.data.toStr()
    )

    c.HTML(200, "index.html", {
        Page: "appinfo",
        PageName: appname,
        Main: main,
        App: app.info
    })
)

def promotePage(*gin.Context c) (

    object main = mainObject(c)

    c.HTML(200, "index.html", {
        Page: "promote",
        PageName: "Promote",
        Main: main
    })
)

def analyticsPage(*gin.Context c) (

    object main = mainObject(c)
    string appname = c.Param("appname")

    object appResp = getAppInfo(appname)
    if appResp.ok == false (
        c.HTML(404, "index.html", {
            Page: "dashboard",
            PageName: "Not found",
            Main: main,
        })
        return
    )
    object app = appResp.info
    object stats = {
        Downloads: app.downloads,
        Views: app.views,
        Hidden: app.hidden,
        Version: app.version,
    }

    c.HTML(200, "index.html", {
        Page: "analytics",
        PageName: "Analytics - " ++ appname,
        Main: main,
        Stats: stats,
        App: app,
    })
)

def createAppPage(*gin.Context c) (

    object main = mainObject(c)

    c.HTML(200, "index.html", {
        Page: "create",
        PageName: "Create App",
        Main: main,
    })
)

def adminPage(*gin.Context c) (

    object main = mainObject(c)
    object resp = getAllApps(true)
    if !resp.ok (
        c.HTML(500, "index.html", { Page: "admin", PageName: "Admin", Main: main, Apps: [] })
        return
    )

    object apps = resp.apps
    array appNames = apps.getKeys()
    array pending = []
    array approved = []
    for i appNames.len (
        object a = apps[appNames[i]]
        if a.approved == false (
            void pending.append(a)
        ) else (
            void approved.append(a)
        )
    )

    c.HTML(200, "index.html", {
        Page: "admin",
        PageName: "Admin",
        Main: main,
        Pending: pending,
        Approved: approved,
    })
)


def publishPage(*gin.Context c) (

    object main = mainObject(c)

    c.HTML(200, "index.html", {
        Page: "publish",
        PageName: "Publish",
        Main: main
    })
)

def authPage(*gin.Context c) (
    c.HTML(200, "auth.html", {})
)